defmodule OnTheMap.Auth.Identity do
  @moduledoc """
  Naive identity implementation
  """

  use Ecto.Schema
  import Ecto.Changeset

  alias OnTheMap.Auth

  @typedoc """
  Identity.t() is generated by a macro. This is why we can't use it in the type definition.
  So we abuse the fact that structs are maps, and use a map type instead.
  `st` stands for "static type".
  """
  @type st :: %{required(:__struct__) => OnTheMap.Auth.Identity, optional(any()) => any()}

  schema "auth_identities" do
    field :secret, :string
    field :url, :string
    field :challenge, :integer

    timestamps()
  end

  @doc false
  def changeset(identity, attrs) do
    identity
    |> cast(attrs, [:url, :secret])
    |> validate_required([:url, :secret])
    |> validate_length(:secret, is: 1024, message: "invalid")
    |> ensure_unique_id()
    |> unique_constraint(:secret)
  end

  def challenge_changeset(identity, attrs) do
    identity
    |> cast(attrs, [:challenge])
    |> validate_required(:challenge)
  end

  defp ensure_unique_id(changeset) do
    <<id::binary-size(4)>> <> _rest = fetch_field!(changeset, :secret)

    if Auth.identity_exists?(id), do: add_error(changeset, :secret, "already taken"), else: changeset
  end
end
